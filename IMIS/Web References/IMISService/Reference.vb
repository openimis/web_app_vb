'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace IMISService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Service1Soap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Service1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getFTPCredentialsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnquireInsureeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrentVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isUniqueReceiptNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isValidRenewalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFeedbackOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadRenewalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadPhotoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isValidClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isValidFeedbackOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isValidPhoneOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getFeedbacksNewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getFeedbacksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getRenewalsNewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getRenewalsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DiscontinuePolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimStatsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFeedbackStatsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRenewalStatsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertPhotoEntryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEnrolmentStatsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckServerPathOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkAppSettingsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPayersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreatePhoneExtractsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateOfflineExtractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPolicyValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSnapshotIndicatorsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCumulativeIndicatorsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isValidLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnrollFamilyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private downloadMasterDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadFamilyDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFromPhoneOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsureeNumberExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.IMIS.My.MySettings.Default.IMIS_IMISService_Service1
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getFTPCredentialsCompleted As getFTPCredentialsCompletedEventHandler
        
        '''<remarks/>
        Public Event EnquireInsureeCompleted As EnquireInsureeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrentVersionCompleted As GetCurrentVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event isUniqueReceiptNoCompleted As isUniqueReceiptNoCompletedEventHandler
        
        '''<remarks/>
        Public Event isValidRenewalCompleted As isValidRenewalCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadClaimCompleted As UploadClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFeedbackCompleted As UploadFeedbackCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadRenewalCompleted As UploadRenewalCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadPhotoCompleted As UploadPhotoCompletedEventHandler
        
        '''<remarks/>
        Public Event isValidClaimCompleted As isValidClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event isValidFeedbackCompleted As isValidFeedbackCompletedEventHandler
        
        '''<remarks/>
        Public Event isValidPhoneCompleted As isValidPhoneCompletedEventHandler
        
        '''<remarks/>
        Public Event getFeedbacksNewCompleted As getFeedbacksNewCompletedEventHandler
        
        '''<remarks/>
        Public Event getFeedbacksCompleted As getFeedbacksCompletedEventHandler
        
        '''<remarks/>
        Public Event getRenewalsNewCompleted As getRenewalsNewCompletedEventHandler
        
        '''<remarks/>
        Public Event getRenewalsCompleted As getRenewalsCompletedEventHandler
        
        '''<remarks/>
        Public Event DiscontinuePolicyCompleted As DiscontinuePolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimStatsCompleted As GetClaimStatsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFeedbackStatsCompleted As GetFeedbackStatsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRenewalStatsCompleted As GetRenewalStatsCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertPhotoEntryCompleted As InsertPhotoEntryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEnrolmentStatsCompleted As GetEnrolmentStatsCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckServerPathCompleted As CheckServerPathCompletedEventHandler
        
        '''<remarks/>
        Public Event checkAppSettingsCompleted As checkAppSettingsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPayersCompleted As GetPayersCompletedEventHandler
        
        '''<remarks/>
        Public Event CreatePhoneExtractsCompleted As CreatePhoneExtractsCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateOfflineExtractCompleted As CreateOfflineExtractCompletedEventHandler
        
        '''<remarks/>
        Public Event getPolicyValueCompleted As getPolicyValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSnapshotIndicatorsCompleted As GetSnapshotIndicatorsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCumulativeIndicatorsCompleted As GetCumulativeIndicatorsCompletedEventHandler
        
        '''<remarks/>
        Public Event isValidLoginCompleted As isValidLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event EnrollFamilyCompleted As EnrollFamilyCompletedEventHandler
        
        '''<remarks/>
        Public Event downloadMasterDataCompleted As downloadMasterDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadFamilyDataCompleted As DownloadFamilyDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFromPhoneCompleted As DeleteFromPhoneCompletedEventHandler
        
        '''<remarks/>
        Public Event InsureeNumberExistCompleted As InsureeNumberExistCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getFTPCredentials", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getFTPCredentials() As String
            Dim results() As Object = Me.Invoke("getFTPCredentials", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getFTPCredentialsAsync()
            Me.getFTPCredentialsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getFTPCredentialsAsync(ByVal userState As Object)
            If (Me.getFTPCredentialsOperationCompleted Is Nothing) Then
                Me.getFTPCredentialsOperationCompleted = AddressOf Me.OngetFTPCredentialsOperationCompleted
            End If
            Me.InvokeAsync("getFTPCredentials", New Object(-1) {}, Me.getFTPCredentialsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFTPCredentialsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getFTPCredentialsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFTPCredentialsCompleted(Me, New getFTPCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnquireInsuree", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnquireInsuree(ByVal CHFID As String) As String
            Dim results() As Object = Me.Invoke("EnquireInsuree", New Object() {CHFID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnquireInsureeAsync(ByVal CHFID As String)
            Me.EnquireInsureeAsync(CHFID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnquireInsureeAsync(ByVal CHFID As String, ByVal userState As Object)
            If (Me.EnquireInsureeOperationCompleted Is Nothing) Then
                Me.EnquireInsureeOperationCompleted = AddressOf Me.OnEnquireInsureeOperationCompleted
            End If
            Me.InvokeAsync("EnquireInsuree", New Object() {CHFID}, Me.EnquireInsureeOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnquireInsureeOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnquireInsureeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnquireInsureeCompleted(Me, New EnquireInsureeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCurrentVersion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrentVersion(ByVal Field As String) As String
            Dim results() As Object = Me.Invoke("GetCurrentVersion", New Object() {Field})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrentVersionAsync(ByVal Field As String)
            Me.GetCurrentVersionAsync(Field, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrentVersionAsync(ByVal Field As String, ByVal userState As Object)
            If (Me.GetCurrentVersionOperationCompleted Is Nothing) Then
                Me.GetCurrentVersionOperationCompleted = AddressOf Me.OnGetCurrentVersionOperationCompleted
            End If
            Me.InvokeAsync("GetCurrentVersion", New Object() {Field}, Me.GetCurrentVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrentVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrentVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrentVersionCompleted(Me, New GetCurrentVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isUniqueReceiptNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isUniqueReceiptNo(ByVal ReceiptNo As String, ByVal CHFID As String) As Boolean
            Dim results() As Object = Me.Invoke("isUniqueReceiptNo", New Object() {ReceiptNo, CHFID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isUniqueReceiptNoAsync(ByVal ReceiptNo As String, ByVal CHFID As String)
            Me.isUniqueReceiptNoAsync(ReceiptNo, CHFID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isUniqueReceiptNoAsync(ByVal ReceiptNo As String, ByVal CHFID As String, ByVal userState As Object)
            If (Me.isUniqueReceiptNoOperationCompleted Is Nothing) Then
                Me.isUniqueReceiptNoOperationCompleted = AddressOf Me.OnisUniqueReceiptNoOperationCompleted
            End If
            Me.InvokeAsync("isUniqueReceiptNo", New Object() {ReceiptNo, CHFID}, Me.isUniqueReceiptNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnisUniqueReceiptNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.isUniqueReceiptNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isUniqueReceiptNoCompleted(Me, New isUniqueReceiptNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isValidRenewal", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isValidRenewal(ByVal FileName As String) As Integer
            Dim results() As Object = Me.Invoke("isValidRenewal", New Object() {FileName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isValidRenewalAsync(ByVal FileName As String)
            Me.isValidRenewalAsync(FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isValidRenewalAsync(ByVal FileName As String, ByVal userState As Object)
            If (Me.isValidRenewalOperationCompleted Is Nothing) Then
                Me.isValidRenewalOperationCompleted = AddressOf Me.OnisValidRenewalOperationCompleted
            End If
            Me.InvokeAsync("isValidRenewal", New Object() {FileName}, Me.isValidRenewalOperationCompleted, userState)
        End Sub
        
        Private Sub OnisValidRenewalOperationCompleted(ByVal arg As Object)
            If (Not (Me.isValidRenewalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isValidRenewalCompleted(Me, New isValidRenewalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadClaim", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadClaim(ByVal JsonFileName As String, ByVal FileName As String) As String
            Dim results() As Object = Me.Invoke("UploadClaim", New Object() {JsonFileName, FileName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadClaimAsync(ByVal JsonFileName As String, ByVal FileName As String)
            Me.UploadClaimAsync(JsonFileName, FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadClaimAsync(ByVal JsonFileName As String, ByVal FileName As String, ByVal userState As Object)
            If (Me.UploadClaimOperationCompleted Is Nothing) Then
                Me.UploadClaimOperationCompleted = AddressOf Me.OnUploadClaimOperationCompleted
            End If
            Me.InvokeAsync("UploadClaim", New Object() {JsonFileName, FileName}, Me.UploadClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadClaimCompleted(Me, New UploadClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFeedback", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFeedback(ByVal JsonFileName As String, ByVal FileName As String) As String
            Dim results() As Object = Me.Invoke("UploadFeedback", New Object() {JsonFileName, FileName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFeedbackAsync(ByVal JsonFileName As String, ByVal FileName As String)
            Me.UploadFeedbackAsync(JsonFileName, FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFeedbackAsync(ByVal JsonFileName As String, ByVal FileName As String, ByVal userState As Object)
            If (Me.UploadFeedbackOperationCompleted Is Nothing) Then
                Me.UploadFeedbackOperationCompleted = AddressOf Me.OnUploadFeedbackOperationCompleted
            End If
            Me.InvokeAsync("UploadFeedback", New Object() {JsonFileName, FileName}, Me.UploadFeedbackOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFeedbackOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFeedbackCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFeedbackCompleted(Me, New UploadFeedbackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadRenewal", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadRenewal(ByVal JsonFileName As String, ByVal FileName As String) As String
            Dim results() As Object = Me.Invoke("UploadRenewal", New Object() {JsonFileName, FileName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadRenewalAsync(ByVal JsonFileName As String, ByVal FileName As String)
            Me.UploadRenewalAsync(JsonFileName, FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadRenewalAsync(ByVal JsonFileName As String, ByVal FileName As String, ByVal userState As Object)
            If (Me.UploadRenewalOperationCompleted Is Nothing) Then
                Me.UploadRenewalOperationCompleted = AddressOf Me.OnUploadRenewalOperationCompleted
            End If
            Me.InvokeAsync("UploadRenewal", New Object() {JsonFileName, FileName}, Me.UploadRenewalOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadRenewalOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadRenewalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadRenewalCompleted(Me, New UploadRenewalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadPhoto", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UploadPhoto(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Image() As Byte, ByVal ImageName As String, ByVal CHFID As String, ByVal OfficerCode As String)
            Me.Invoke("UploadPhoto", New Object() {Image, ImageName, CHFID, OfficerCode})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadPhotoAsync(ByVal Image() As Byte, ByVal ImageName As String, ByVal CHFID As String, ByVal OfficerCode As String)
            Me.UploadPhotoAsync(Image, ImageName, CHFID, OfficerCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadPhotoAsync(ByVal Image() As Byte, ByVal ImageName As String, ByVal CHFID As String, ByVal OfficerCode As String, ByVal userState As Object)
            If (Me.UploadPhotoOperationCompleted Is Nothing) Then
                Me.UploadPhotoOperationCompleted = AddressOf Me.OnUploadPhotoOperationCompleted
            End If
            Me.InvokeAsync("UploadPhoto", New Object() {Image, ImageName, CHFID, OfficerCode}, Me.UploadPhotoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadPhotoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadPhotoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadPhotoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isValidClaim", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isValidClaim(ByVal FileName As String) As Integer
            Dim results() As Object = Me.Invoke("isValidClaim", New Object() {FileName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isValidClaimAsync(ByVal FileName As String)
            Me.isValidClaimAsync(FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isValidClaimAsync(ByVal FileName As String, ByVal userState As Object)
            If (Me.isValidClaimOperationCompleted Is Nothing) Then
                Me.isValidClaimOperationCompleted = AddressOf Me.OnisValidClaimOperationCompleted
            End If
            Me.InvokeAsync("isValidClaim", New Object() {FileName}, Me.isValidClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnisValidClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.isValidClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isValidClaimCompleted(Me, New isValidClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isValidFeedback", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isValidFeedback(ByVal FileName As String) As Integer
            Dim results() As Object = Me.Invoke("isValidFeedback", New Object() {FileName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isValidFeedbackAsync(ByVal FileName As String)
            Me.isValidFeedbackAsync(FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isValidFeedbackAsync(ByVal FileName As String, ByVal userState As Object)
            If (Me.isValidFeedbackOperationCompleted Is Nothing) Then
                Me.isValidFeedbackOperationCompleted = AddressOf Me.OnisValidFeedbackOperationCompleted
            End If
            Me.InvokeAsync("isValidFeedback", New Object() {FileName}, Me.isValidFeedbackOperationCompleted, userState)
        End Sub
        
        Private Sub OnisValidFeedbackOperationCompleted(ByVal arg As Object)
            If (Not (Me.isValidFeedbackCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isValidFeedbackCompleted(Me, New isValidFeedbackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isValidPhone", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isValidPhone(ByVal OfficerCode As String, ByVal PhoneNumber As String) As Boolean
            Dim results() As Object = Me.Invoke("isValidPhone", New Object() {OfficerCode, PhoneNumber})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isValidPhoneAsync(ByVal OfficerCode As String, ByVal PhoneNumber As String)
            Me.isValidPhoneAsync(OfficerCode, PhoneNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isValidPhoneAsync(ByVal OfficerCode As String, ByVal PhoneNumber As String, ByVal userState As Object)
            If (Me.isValidPhoneOperationCompleted Is Nothing) Then
                Me.isValidPhoneOperationCompleted = AddressOf Me.OnisValidPhoneOperationCompleted
            End If
            Me.InvokeAsync("isValidPhone", New Object() {OfficerCode, PhoneNumber}, Me.isValidPhoneOperationCompleted, userState)
        End Sub
        
        Private Sub OnisValidPhoneOperationCompleted(ByVal arg As Object)
            If (Not (Me.isValidPhoneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isValidPhoneCompleted(Me, New isValidPhoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getFeedbacksNew", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getFeedbacksNew(ByVal OfficerCode As String) As String
            Dim results() As Object = Me.Invoke("getFeedbacksNew", New Object() {OfficerCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getFeedbacksNewAsync(ByVal OfficerCode As String)
            Me.getFeedbacksNewAsync(OfficerCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getFeedbacksNewAsync(ByVal OfficerCode As String, ByVal userState As Object)
            If (Me.getFeedbacksNewOperationCompleted Is Nothing) Then
                Me.getFeedbacksNewOperationCompleted = AddressOf Me.OngetFeedbacksNewOperationCompleted
            End If
            Me.InvokeAsync("getFeedbacksNew", New Object() {OfficerCode}, Me.getFeedbacksNewOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFeedbacksNewOperationCompleted(ByVal arg As Object)
            If (Not (Me.getFeedbacksNewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFeedbacksNewCompleted(Me, New getFeedbacksNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getFeedbacks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getFeedbacks(ByVal OfficerCode As String, ByVal PhoneNumber As String) As String
            Dim results() As Object = Me.Invoke("getFeedbacks", New Object() {OfficerCode, PhoneNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getFeedbacksAsync(ByVal OfficerCode As String, ByVal PhoneNumber As String)
            Me.getFeedbacksAsync(OfficerCode, PhoneNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getFeedbacksAsync(ByVal OfficerCode As String, ByVal PhoneNumber As String, ByVal userState As Object)
            If (Me.getFeedbacksOperationCompleted Is Nothing) Then
                Me.getFeedbacksOperationCompleted = AddressOf Me.OngetFeedbacksOperationCompleted
            End If
            Me.InvokeAsync("getFeedbacks", New Object() {OfficerCode, PhoneNumber}, Me.getFeedbacksOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFeedbacksOperationCompleted(ByVal arg As Object)
            If (Not (Me.getFeedbacksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFeedbacksCompleted(Me, New getFeedbacksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRenewalsNew", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getRenewalsNew(ByVal OfficerCode As String) As String
            Dim results() As Object = Me.Invoke("getRenewalsNew", New Object() {OfficerCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getRenewalsNewAsync(ByVal OfficerCode As String)
            Me.getRenewalsNewAsync(OfficerCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getRenewalsNewAsync(ByVal OfficerCode As String, ByVal userState As Object)
            If (Me.getRenewalsNewOperationCompleted Is Nothing) Then
                Me.getRenewalsNewOperationCompleted = AddressOf Me.OngetRenewalsNewOperationCompleted
            End If
            Me.InvokeAsync("getRenewalsNew", New Object() {OfficerCode}, Me.getRenewalsNewOperationCompleted, userState)
        End Sub
        
        Private Sub OngetRenewalsNewOperationCompleted(ByVal arg As Object)
            If (Not (Me.getRenewalsNewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getRenewalsNewCompleted(Me, New getRenewalsNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRenewals", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getRenewals(ByVal OfficerCode As String, ByVal PhoneNumber As String) As String
            Dim results() As Object = Me.Invoke("getRenewals", New Object() {OfficerCode, PhoneNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getRenewalsAsync(ByVal OfficerCode As String, ByVal PhoneNumber As String)
            Me.getRenewalsAsync(OfficerCode, PhoneNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getRenewalsAsync(ByVal OfficerCode As String, ByVal PhoneNumber As String, ByVal userState As Object)
            If (Me.getRenewalsOperationCompleted Is Nothing) Then
                Me.getRenewalsOperationCompleted = AddressOf Me.OngetRenewalsOperationCompleted
            End If
            Me.InvokeAsync("getRenewals", New Object() {OfficerCode, PhoneNumber}, Me.getRenewalsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetRenewalsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getRenewalsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getRenewalsCompleted(Me, New getRenewalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DiscontinuePolicy", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DiscontinuePolicy(ByVal RenewalId As Integer)
            Me.Invoke("DiscontinuePolicy", New Object() {RenewalId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DiscontinuePolicyAsync(ByVal RenewalId As Integer)
            Me.DiscontinuePolicyAsync(RenewalId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DiscontinuePolicyAsync(ByVal RenewalId As Integer, ByVal userState As Object)
            If (Me.DiscontinuePolicyOperationCompleted Is Nothing) Then
                Me.DiscontinuePolicyOperationCompleted = AddressOf Me.OnDiscontinuePolicyOperationCompleted
            End If
            Me.InvokeAsync("DiscontinuePolicy", New Object() {RenewalId}, Me.DiscontinuePolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnDiscontinuePolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.DiscontinuePolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DiscontinuePolicyCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClaimStats", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimStats(ByVal HFCode As String, ByVal ClaimAdmin As String, ByVal FromDate As Date, ByVal ToDate As String) As String
            Dim results() As Object = Me.Invoke("GetClaimStats", New Object() {HFCode, ClaimAdmin, FromDate, ToDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimStatsAsync(ByVal HFCode As String, ByVal ClaimAdmin As String, ByVal FromDate As Date, ByVal ToDate As String)
            Me.GetClaimStatsAsync(HFCode, ClaimAdmin, FromDate, ToDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimStatsAsync(ByVal HFCode As String, ByVal ClaimAdmin As String, ByVal FromDate As Date, ByVal ToDate As String, ByVal userState As Object)
            If (Me.GetClaimStatsOperationCompleted Is Nothing) Then
                Me.GetClaimStatsOperationCompleted = AddressOf Me.OnGetClaimStatsOperationCompleted
            End If
            Me.InvokeAsync("GetClaimStats", New Object() {HFCode, ClaimAdmin, FromDate, ToDate}, Me.GetClaimStatsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimStatsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimStatsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimStatsCompleted(Me, New GetClaimStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFeedbackStats", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFeedbackStats(ByVal OfficerCode As String, ByVal FromDate As Date, ByVal ToDate As Date) As String
            Dim results() As Object = Me.Invoke("GetFeedbackStats", New Object() {OfficerCode, FromDate, ToDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFeedbackStatsAsync(ByVal OfficerCode As String, ByVal FromDate As Date, ByVal ToDate As Date)
            Me.GetFeedbackStatsAsync(OfficerCode, FromDate, ToDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFeedbackStatsAsync(ByVal OfficerCode As String, ByVal FromDate As Date, ByVal ToDate As Date, ByVal userState As Object)
            If (Me.GetFeedbackStatsOperationCompleted Is Nothing) Then
                Me.GetFeedbackStatsOperationCompleted = AddressOf Me.OnGetFeedbackStatsOperationCompleted
            End If
            Me.InvokeAsync("GetFeedbackStats", New Object() {OfficerCode, FromDate, ToDate}, Me.GetFeedbackStatsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFeedbackStatsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFeedbackStatsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFeedbackStatsCompleted(Me, New GetFeedbackStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRenewalStats", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRenewalStats(ByVal OfficerCode As String, ByVal FromDate As Date, ByVal ToDate As Date) As String
            Dim results() As Object = Me.Invoke("GetRenewalStats", New Object() {OfficerCode, FromDate, ToDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRenewalStatsAsync(ByVal OfficerCode As String, ByVal FromDate As Date, ByVal ToDate As Date)
            Me.GetRenewalStatsAsync(OfficerCode, FromDate, ToDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRenewalStatsAsync(ByVal OfficerCode As String, ByVal FromDate As Date, ByVal ToDate As Date, ByVal userState As Object)
            If (Me.GetRenewalStatsOperationCompleted Is Nothing) Then
                Me.GetRenewalStatsOperationCompleted = AddressOf Me.OnGetRenewalStatsOperationCompleted
            End If
            Me.InvokeAsync("GetRenewalStats", New Object() {OfficerCode, FromDate, ToDate}, Me.GetRenewalStatsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRenewalStatsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRenewalStatsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRenewalStatsCompleted(Me, New GetRenewalStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPhotoEntry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InsertPhotoEntry(ByVal FileName As String, ByVal CHFID As String, ByVal OfficerCode As String)
            Me.Invoke("InsertPhotoEntry", New Object() {FileName, CHFID, OfficerCode})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertPhotoEntryAsync(ByVal FileName As String, ByVal CHFID As String, ByVal OfficerCode As String)
            Me.InsertPhotoEntryAsync(FileName, CHFID, OfficerCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertPhotoEntryAsync(ByVal FileName As String, ByVal CHFID As String, ByVal OfficerCode As String, ByVal userState As Object)
            If (Me.InsertPhotoEntryOperationCompleted Is Nothing) Then
                Me.InsertPhotoEntryOperationCompleted = AddressOf Me.OnInsertPhotoEntryOperationCompleted
            End If
            Me.InvokeAsync("InsertPhotoEntry", New Object() {FileName, CHFID, OfficerCode}, Me.InsertPhotoEntryOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertPhotoEntryOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertPhotoEntryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertPhotoEntryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEnrolmentStats", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEnrolmentStats(ByVal OfficerCode As String, ByVal FromDate As String, ByVal ToDate As String) As String
            Dim results() As Object = Me.Invoke("GetEnrolmentStats", New Object() {OfficerCode, FromDate, ToDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEnrolmentStatsAsync(ByVal OfficerCode As String, ByVal FromDate As String, ByVal ToDate As String)
            Me.GetEnrolmentStatsAsync(OfficerCode, FromDate, ToDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEnrolmentStatsAsync(ByVal OfficerCode As String, ByVal FromDate As String, ByVal ToDate As String, ByVal userState As Object)
            If (Me.GetEnrolmentStatsOperationCompleted Is Nothing) Then
                Me.GetEnrolmentStatsOperationCompleted = AddressOf Me.OnGetEnrolmentStatsOperationCompleted
            End If
            Me.InvokeAsync("GetEnrolmentStats", New Object() {OfficerCode, FromDate, ToDate}, Me.GetEnrolmentStatsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEnrolmentStatsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEnrolmentStatsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEnrolmentStatsCompleted(Me, New GetEnrolmentStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckServerPath", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckServerPath(ByVal PathToGo As String) As String
            Dim results() As Object = Me.Invoke("CheckServerPath", New Object() {PathToGo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckServerPathAsync(ByVal PathToGo As String)
            Me.CheckServerPathAsync(PathToGo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckServerPathAsync(ByVal PathToGo As String, ByVal userState As Object)
            If (Me.CheckServerPathOperationCompleted Is Nothing) Then
                Me.CheckServerPathOperationCompleted = AddressOf Me.OnCheckServerPathOperationCompleted
            End If
            Me.InvokeAsync("CheckServerPath", New Object() {PathToGo}, Me.CheckServerPathOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckServerPathOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckServerPathCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckServerPathCompleted(Me, New CheckServerPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkAppSettings", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkAppSettings(ByVal SettingName As String) As String
            Dim results() As Object = Me.Invoke("checkAppSettings", New Object() {SettingName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkAppSettingsAsync(ByVal SettingName As String)
            Me.checkAppSettingsAsync(SettingName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkAppSettingsAsync(ByVal SettingName As String, ByVal userState As Object)
            If (Me.checkAppSettingsOperationCompleted Is Nothing) Then
                Me.checkAppSettingsOperationCompleted = AddressOf Me.OncheckAppSettingsOperationCompleted
            End If
            Me.InvokeAsync("checkAppSettings", New Object() {SettingName}, Me.checkAppSettingsOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckAppSettingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkAppSettingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkAppSettingsCompleted(Me, New checkAppSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPayers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPayers(ByVal OfficerCode As String) As String
            Dim results() As Object = Me.Invoke("GetPayers", New Object() {OfficerCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPayersAsync(ByVal OfficerCode As String)
            Me.GetPayersAsync(OfficerCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPayersAsync(ByVal OfficerCode As String, ByVal userState As Object)
            If (Me.GetPayersOperationCompleted Is Nothing) Then
                Me.GetPayersOperationCompleted = AddressOf Me.OnGetPayersOperationCompleted
            End If
            Me.InvokeAsync("GetPayers", New Object() {OfficerCode}, Me.GetPayersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPayersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPayersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPayersCompleted(Me, New GetPayersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreatePhoneExtracts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreatePhoneExtracts(ByVal DistrictId As Integer, ByVal UserId As Integer, ByVal WithInsuree As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("CreatePhoneExtracts", New Object() {DistrictId, UserId, WithInsuree})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreatePhoneExtractsAsync(ByVal DistrictId As Integer, ByVal UserId As Integer, ByVal WithInsuree As Boolean)
            Me.CreatePhoneExtractsAsync(DistrictId, UserId, WithInsuree, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreatePhoneExtractsAsync(ByVal DistrictId As Integer, ByVal UserId As Integer, ByVal WithInsuree As Boolean, ByVal userState As Object)
            If (Me.CreatePhoneExtractsOperationCompleted Is Nothing) Then
                Me.CreatePhoneExtractsOperationCompleted = AddressOf Me.OnCreatePhoneExtractsOperationCompleted
            End If
            Me.InvokeAsync("CreatePhoneExtracts", New Object() {DistrictId, UserId, WithInsuree}, Me.CreatePhoneExtractsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreatePhoneExtractsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreatePhoneExtractsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreatePhoneExtractsCompleted(Me, New CreatePhoneExtractsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateOfflineExtract", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateOfflineExtract(ByVal RegionId As Integer, ByVal DistrictId As Integer, ByVal UserId As Integer, ByVal WithInsuree As Boolean, ByVal ChkFullExtract As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("CreateOfflineExtract", New Object() {RegionId, DistrictId, UserId, WithInsuree, ChkFullExtract})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateOfflineExtractAsync(ByVal RegionId As Integer, ByVal DistrictId As Integer, ByVal UserId As Integer, ByVal WithInsuree As Boolean, ByVal ChkFullExtract As Boolean)
            Me.CreateOfflineExtractAsync(RegionId, DistrictId, UserId, WithInsuree, ChkFullExtract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateOfflineExtractAsync(ByVal RegionId As Integer, ByVal DistrictId As Integer, ByVal UserId As Integer, ByVal WithInsuree As Boolean, ByVal ChkFullExtract As Boolean, ByVal userState As Object)
            If (Me.CreateOfflineExtractOperationCompleted Is Nothing) Then
                Me.CreateOfflineExtractOperationCompleted = AddressOf Me.OnCreateOfflineExtractOperationCompleted
            End If
            Me.InvokeAsync("CreateOfflineExtract", New Object() {RegionId, DistrictId, UserId, WithInsuree, ChkFullExtract}, Me.CreateOfflineExtractOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateOfflineExtractOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateOfflineExtractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateOfflineExtractCompleted(Me, New CreateOfflineExtractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPolicyValue", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPolicyValue(ByVal FamilyId As Integer, ByVal ProdId As Integer, ByVal PolicyId As Integer, ByVal PolicyStage As String, ByVal EnrollDate As String, ByVal PreviousPolicyId As Integer) As Double
            Dim results() As Object = Me.Invoke("getPolicyValue", New Object() {FamilyId, ProdId, PolicyId, PolicyStage, EnrollDate, PreviousPolicyId})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPolicyValueAsync(ByVal FamilyId As Integer, ByVal ProdId As Integer, ByVal PolicyId As Integer, ByVal PolicyStage As String, ByVal EnrollDate As String, ByVal PreviousPolicyId As Integer)
            Me.getPolicyValueAsync(FamilyId, ProdId, PolicyId, PolicyStage, EnrollDate, PreviousPolicyId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPolicyValueAsync(ByVal FamilyId As Integer, ByVal ProdId As Integer, ByVal PolicyId As Integer, ByVal PolicyStage As String, ByVal EnrollDate As String, ByVal PreviousPolicyId As Integer, ByVal userState As Object)
            If (Me.getPolicyValueOperationCompleted Is Nothing) Then
                Me.getPolicyValueOperationCompleted = AddressOf Me.OngetPolicyValueOperationCompleted
            End If
            Me.InvokeAsync("getPolicyValue", New Object() {FamilyId, ProdId, PolicyId, PolicyStage, EnrollDate, PreviousPolicyId}, Me.getPolicyValueOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPolicyValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPolicyValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPolicyValueCompleted(Me, New getPolicyValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSnapshotIndicators", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSnapshotIndicators(ByVal SnapshotDate As String, ByVal OfficerId As Integer) As String
            Dim results() As Object = Me.Invoke("GetSnapshotIndicators", New Object() {SnapshotDate, OfficerId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSnapshotIndicatorsAsync(ByVal SnapshotDate As String, ByVal OfficerId As Integer)
            Me.GetSnapshotIndicatorsAsync(SnapshotDate, OfficerId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSnapshotIndicatorsAsync(ByVal SnapshotDate As String, ByVal OfficerId As Integer, ByVal userState As Object)
            If (Me.GetSnapshotIndicatorsOperationCompleted Is Nothing) Then
                Me.GetSnapshotIndicatorsOperationCompleted = AddressOf Me.OnGetSnapshotIndicatorsOperationCompleted
            End If
            Me.InvokeAsync("GetSnapshotIndicators", New Object() {SnapshotDate, OfficerId}, Me.GetSnapshotIndicatorsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSnapshotIndicatorsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSnapshotIndicatorsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSnapshotIndicatorsCompleted(Me, New GetSnapshotIndicatorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCumulativeIndicators", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCumulativeIndicators(ByVal DateFrom As String, ByVal DateTo As String, ByVal OfficerId As Integer) As String
            Dim results() As Object = Me.Invoke("GetCumulativeIndicators", New Object() {DateFrom, DateTo, OfficerId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCumulativeIndicatorsAsync(ByVal DateFrom As String, ByVal DateTo As String, ByVal OfficerId As Integer)
            Me.GetCumulativeIndicatorsAsync(DateFrom, DateTo, OfficerId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCumulativeIndicatorsAsync(ByVal DateFrom As String, ByVal DateTo As String, ByVal OfficerId As Integer, ByVal userState As Object)
            If (Me.GetCumulativeIndicatorsOperationCompleted Is Nothing) Then
                Me.GetCumulativeIndicatorsOperationCompleted = AddressOf Me.OnGetCumulativeIndicatorsOperationCompleted
            End If
            Me.InvokeAsync("GetCumulativeIndicators", New Object() {DateFrom, DateTo, OfficerId}, Me.GetCumulativeIndicatorsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCumulativeIndicatorsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCumulativeIndicatorsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCumulativeIndicatorsCompleted(Me, New GetCumulativeIndicatorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isValidLogin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isValidLogin(ByVal LoginName As String, ByVal Password As String) As Integer
            Dim results() As Object = Me.Invoke("isValidLogin", New Object() {LoginName, Password})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isValidLoginAsync(ByVal LoginName As String, ByVal Password As String)
            Me.isValidLoginAsync(LoginName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isValidLoginAsync(ByVal LoginName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.isValidLoginOperationCompleted Is Nothing) Then
                Me.isValidLoginOperationCompleted = AddressOf Me.OnisValidLoginOperationCompleted
            End If
            Me.InvokeAsync("isValidLogin", New Object() {LoginName, Password}, Me.isValidLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnisValidLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.isValidLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isValidLoginCompleted(Me, New isValidLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnrollFamily", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnrollFamily(ByVal Family As String, ByVal Insuree As String, ByVal Policy As String, ByVal Premium As String, ByVal InsureePolicy As String, ByVal OfficerId As Integer, ByVal UserId As Integer, ByVal Pictures() As InsureeImages) As Integer
            Dim results() As Object = Me.Invoke("EnrollFamily", New Object() {Family, Insuree, Policy, Premium, InsureePolicy, OfficerId, UserId, Pictures})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnrollFamilyAsync(ByVal Family As String, ByVal Insuree As String, ByVal Policy As String, ByVal Premium As String, ByVal InsureePolicy As String, ByVal OfficerId As Integer, ByVal UserId As Integer, ByVal Pictures() As InsureeImages)
            Me.EnrollFamilyAsync(Family, Insuree, Policy, Premium, InsureePolicy, OfficerId, UserId, Pictures, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnrollFamilyAsync(ByVal Family As String, ByVal Insuree As String, ByVal Policy As String, ByVal Premium As String, ByVal InsureePolicy As String, ByVal OfficerId As Integer, ByVal UserId As Integer, ByVal Pictures() As InsureeImages, ByVal userState As Object)
            If (Me.EnrollFamilyOperationCompleted Is Nothing) Then
                Me.EnrollFamilyOperationCompleted = AddressOf Me.OnEnrollFamilyOperationCompleted
            End If
            Me.InvokeAsync("EnrollFamily", New Object() {Family, Insuree, Policy, Premium, InsureePolicy, OfficerId, UserId, Pictures}, Me.EnrollFamilyOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnrollFamilyOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnrollFamilyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnrollFamilyCompleted(Me, New EnrollFamilyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadMasterData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function downloadMasterData() As String
            Dim results() As Object = Me.Invoke("downloadMasterData", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub downloadMasterDataAsync()
            Me.downloadMasterDataAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub downloadMasterDataAsync(ByVal userState As Object)
            If (Me.downloadMasterDataOperationCompleted Is Nothing) Then
                Me.downloadMasterDataOperationCompleted = AddressOf Me.OndownloadMasterDataOperationCompleted
            End If
            Me.InvokeAsync("downloadMasterData", New Object(-1) {}, Me.downloadMasterDataOperationCompleted, userState)
        End Sub
        
        Private Sub OndownloadMasterDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.downloadMasterDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent downloadMasterDataCompleted(Me, New downloadMasterDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadFamilyData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadFamilyData(ByVal CHFID As String, ByVal LocationId As Integer) As String
            Dim results() As Object = Me.Invoke("DownloadFamilyData", New Object() {CHFID, LocationId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadFamilyDataAsync(ByVal CHFID As String, ByVal LocationId As Integer)
            Me.DownloadFamilyDataAsync(CHFID, LocationId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadFamilyDataAsync(ByVal CHFID As String, ByVal LocationId As Integer, ByVal userState As Object)
            If (Me.DownloadFamilyDataOperationCompleted Is Nothing) Then
                Me.DownloadFamilyDataOperationCompleted = AddressOf Me.OnDownloadFamilyDataOperationCompleted
            End If
            Me.InvokeAsync("DownloadFamilyData", New Object() {CHFID, LocationId}, Me.DownloadFamilyDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadFamilyDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadFamilyDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadFamilyDataCompleted(Me, New DownloadFamilyDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFromPhone", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFromPhone(ByVal Id As Integer, ByVal AuditUserID As Integer, ByVal DeleteInfo As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteFromPhone", New Object() {Id, AuditUserID, DeleteInfo})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFromPhoneAsync(ByVal Id As Integer, ByVal AuditUserID As Integer, ByVal DeleteInfo As String)
            Me.DeleteFromPhoneAsync(Id, AuditUserID, DeleteInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFromPhoneAsync(ByVal Id As Integer, ByVal AuditUserID As Integer, ByVal DeleteInfo As String, ByVal userState As Object)
            If (Me.DeleteFromPhoneOperationCompleted Is Nothing) Then
                Me.DeleteFromPhoneOperationCompleted = AddressOf Me.OnDeleteFromPhoneOperationCompleted
            End If
            Me.InvokeAsync("DeleteFromPhone", New Object() {Id, AuditUserID, DeleteInfo}, Me.DeleteFromPhoneOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFromPhoneOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFromPhoneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFromPhoneCompleted(Me, New DeleteFromPhoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsureeNumberExist", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsureeNumberExist(ByVal CHFID As String) As Boolean
            Dim results() As Object = Me.Invoke("InsureeNumberExist", New Object() {CHFID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsureeNumberExistAsync(ByVal CHFID As String)
            Me.InsureeNumberExistAsync(CHFID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsureeNumberExistAsync(ByVal CHFID As String, ByVal userState As Object)
            If (Me.InsureeNumberExistOperationCompleted Is Nothing) Then
                Me.InsureeNumberExistOperationCompleted = AddressOf Me.OnInsureeNumberExistOperationCompleted
            End If
            Me.InvokeAsync("InsureeNumberExist", New Object() {CHFID}, Me.InsureeNumberExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsureeNumberExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsureeNumberExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsureeNumberExistCompleted(Me, New InsureeNumberExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class InsureeImages
        
        Private imageNameField As String
        
        Private imageContentField() As Byte
        
        '''<remarks/>
        Public Property ImageName() As String
            Get
                Return Me.imageNameField
            End Get
            Set
                Me.imageNameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property ImageContent() As Byte()
            Get
                Return Me.imageContentField
            End Get
            Set
                Me.imageContentField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getFTPCredentialsCompletedEventHandler(ByVal sender As Object, ByVal e As getFTPCredentialsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getFTPCredentialsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub EnquireInsureeCompletedEventHandler(ByVal sender As Object, ByVal e As EnquireInsureeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnquireInsureeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCurrentVersionCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrentVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrentVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isUniqueReceiptNoCompletedEventHandler(ByVal sender As Object, ByVal e As isUniqueReceiptNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isUniqueReceiptNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isValidRenewalCompletedEventHandler(ByVal sender As Object, ByVal e As isValidRenewalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isValidRenewalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UploadClaimCompletedEventHandler(ByVal sender As Object, ByVal e As UploadClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UploadFeedbackCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFeedbackCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFeedbackCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UploadRenewalCompletedEventHandler(ByVal sender As Object, ByVal e As UploadRenewalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadRenewalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UploadPhotoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isValidClaimCompletedEventHandler(ByVal sender As Object, ByVal e As isValidClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isValidClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isValidFeedbackCompletedEventHandler(ByVal sender As Object, ByVal e As isValidFeedbackCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isValidFeedbackCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isValidPhoneCompletedEventHandler(ByVal sender As Object, ByVal e As isValidPhoneCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isValidPhoneCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getFeedbacksNewCompletedEventHandler(ByVal sender As Object, ByVal e As getFeedbacksNewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getFeedbacksNewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getFeedbacksCompletedEventHandler(ByVal sender As Object, ByVal e As getFeedbacksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getFeedbacksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getRenewalsNewCompletedEventHandler(ByVal sender As Object, ByVal e As getRenewalsNewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getRenewalsNewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getRenewalsCompletedEventHandler(ByVal sender As Object, ByVal e As getRenewalsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getRenewalsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DiscontinuePolicyCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimStatsCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimStatsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimStatsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFeedbackStatsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFeedbackStatsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFeedbackStatsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRenewalStatsCompletedEventHandler(ByVal sender As Object, ByVal e As GetRenewalStatsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRenewalStatsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub InsertPhotoEntryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEnrolmentStatsCompletedEventHandler(ByVal sender As Object, ByVal e As GetEnrolmentStatsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEnrolmentStatsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckServerPathCompletedEventHandler(ByVal sender As Object, ByVal e As CheckServerPathCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckServerPathCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub checkAppSettingsCompletedEventHandler(ByVal sender As Object, ByVal e As checkAppSettingsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkAppSettingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPayersCompletedEventHandler(ByVal sender As Object, ByVal e As GetPayersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPayersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CreatePhoneExtractsCompletedEventHandler(ByVal sender As Object, ByVal e As CreatePhoneExtractsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreatePhoneExtractsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CreateOfflineExtractCompletedEventHandler(ByVal sender As Object, ByVal e As CreateOfflineExtractCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateOfflineExtractCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getPolicyValueCompletedEventHandler(ByVal sender As Object, ByVal e As getPolicyValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPolicyValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSnapshotIndicatorsCompletedEventHandler(ByVal sender As Object, ByVal e As GetSnapshotIndicatorsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSnapshotIndicatorsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCumulativeIndicatorsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCumulativeIndicatorsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCumulativeIndicatorsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isValidLoginCompletedEventHandler(ByVal sender As Object, ByVal e As isValidLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isValidLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub EnrollFamilyCompletedEventHandler(ByVal sender As Object, ByVal e As EnrollFamilyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnrollFamilyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub downloadMasterDataCompletedEventHandler(ByVal sender As Object, ByVal e As downloadMasterDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class downloadMasterDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DownloadFamilyDataCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadFamilyDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadFamilyDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteFromPhoneCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFromPhoneCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFromPhoneCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub InsureeNumberExistCompletedEventHandler(ByVal sender As Object, ByVal e As InsureeNumberExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsureeNumberExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
